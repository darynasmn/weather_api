import datetime as dt
import json

import requests
from flask import Flask, jsonify, request
import datetime as dt
import json

import requests
from flask import Flask, jsonify, request

app = Flask(__name__)

class InvalidUsage(Exception):
    status_code = 400

    def init(self, message, status_code=None, payload=None):
        Exception.init(self)
        self.message = message
        if status_code is not None:
            self.status_code = status_code
        self.payload = payload

    def to_dict(self):
        rv = dict(self.payload or ())
        rv["message"] = self.message
        return rv


@app.errorhandler(InvalidUsage)
def handle_invalid_usage(error):
    response = jsonify(error.to_dict())
    response.status_code = error.status_code
    return response


@app.route("/")
def home_page():
    return "<p><h2>KMA L2: Python Saas.</h2></p>"


@app.route(
    "/content/api/v1/integration/generate",
    methods=["POST"],
)

def weather_entpoint():
    json_data = request.get_json()

    token = json_data.get("token")
 
    if json_data.get("token") is None:
        raise InvalidUsage("token is required", status_code=400)


    if token != API_TOKEN:
        raise InvalidUsage("wrong API token", status_code=403)
   

    startdata = json_data.get("startDateTime")
    location = json_data.get("location")
    requester_name = json_data.get("requester_name")

    url = "https://visual-crossing-weather.p.rapidapi.com/history"
    
    querystring = {"startDateTime":startdata,"aggregateHours":"24","location":location, "unitGroup":"metric",
    "dayStartTime":"8:00:00","contentType":"json","dayEndTime":"17:00:00","shortColumnNames":"0"}
    response = requests.request("GET", url, headers=headers, params = querystring)

   
    weather= response.json()
    start_dt = dt.datetime.now()

    result = {
        "requester_name": requester_name,
        "timestamp" : start_dt.isoformat(),
        "location" : location,
        "date" : startdata,
        "weather":{
        	"temp_c_max" : weather['locations'][querystring['location']]["values"][0]["maxt"],
        	"temp_c" : response.json()['locations'][querystring['location']]["values"][0]["temp"],
        	"temp_c_min" : weather['locations'][querystring['location']]["values"][0]["mint"],
            "wind_kph" : weather['locations'][querystring['location']]["values"][0]["wspd"],
 	      	"pressure_mb" : weather['locations'][querystring['location']]["values"][0]["sealevelpressure"],
        	"humidity" : weather['locations'][querystring['location']]["values"][0]["humidity"],
        	"weathertype" : weather['locations'][querystring['location']]["values"][0]["weathertype"],
        	"visibility" : weather['locations'][querystring['location']]["values"][0]["visibility"],
        	"cloudcover" : weather['locations'][querystring['location']]["values"][0]["cloudcover"]
                 }
        }
    return result






















